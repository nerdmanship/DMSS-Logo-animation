"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Proxy = function () {
  function Proxy(id) {
    _classCallCheck(this, Proxy);

    this.parentElement = document.querySelector("#" + id); // master of proxy
    this.x = 0; // x position
    this.y = 0; // y position
    this.z = 0; // z-index
    this.w = 0; // width
    this.h = 0; // height
    this.cx = 0; // center x
    this.cy = 0; // center y
    this.updateData();
  }

  _createClass(Proxy, [{
    key: "updateData",
    value: function updateData() {
      this.y = window.pageYOffset + this.parentElement.getBoundingClientRect().top;
      this.x = window.pageXOffset + this.parentElement.getBoundingClientRect().left;
      this.z = this.findElementZ() - 1;
      this.w = this.parentElement.offsetWidth;
      this.h = this.parentElement.offsetHeight;
      this.cx = this.x + this.w / 2;
      this.cy = this.y + this.h / 2;
    }
  }, {
    key: "findElementZ",
    value: function findElementZ() {
      var z;
      var elZ = window.getComputedStyle(this.parentElement).getPropertyValue("z-index");
      if (isNaN(elZ)) {
        z = 0;
        throw "Error: Button must have a set z-index value.";
      } else {
        z = elZ;
      }

      return z;
    }
  }]);

  return Proxy;
}();
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SvgNode = function () {
  function SvgNode() {
    _classCallCheck(this, SvgNode);

    this.target = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    this.target.setAttribute("xmlns", "http://www.w3.org/2000/svg");
    this.target.setAttribute("xlinkns", "http://www.w3.org/1999/xlink");
    this.target.setAttribute("style", "overflow: visible; position: absolute;");
  }

  _createClass(SvgNode, [{
    key: "appendTo",
    value: function appendTo(parent) {
      parent.appendChild(this.target);
    }
  }, {
    key: "prependIn",
    value: function prependIn(parent) {
      parent.insertBefore(this.target, parent.childNodes[0]);
    }
  }, {
    key: "setViewbox",
    value: function setViewbox(x, y, w, h) {
      this.target.setAttribute("viewBox", x + " " + y + " " + w + " " + h);
    }
  }, {
    key: "setPosition",
    value: function setPosition(x, y) {
      this.target.setAttribute("left", x);
      this.target.setAttribute("top", y);
    }
  }, {
    key: "setDimensions",
    value: function setDimensions(w, h) {
      this.target.setAttribute("width", w);
      this.target.setAttribute("height", h);
    }
  }, {
    key: "setDepth",
    value: function setDepth(z) {
      this.target.setAttribute("z-index", z);
    }

    // Break out to own extended class : particleContainer

  }, {
    key: "addParticles",
    value: function addParticles(count) {}

    // Break out to own extended class

  }, {
    key: "addProxy",
    value: function addProxy(obj) {
      this.proxy = obj;
      this.target.setAttribute("id", "proxyOf" + obj.parentElement.id);
    }

    // Break out to own extended class

  }, {
    key: "updateViewboxFromProxy",
    value: function updateViewboxFromProxy() {
      this.setViewbox(0, 0, this.proxy.w, this.proxy.h);
    }
  }, {
    key: "updateFromProxy",
    value: function updateFromProxy() {
      var string = "overflow: visible; position: absolute; height: " + this.proxy.h + "px; width: " + this.proxy.w + "px; top: " + this.proxy.y + "px; left: " + this.proxy.x + "px; z-index: " + this.proxy.z + ";";
      this.target.setAttribute("style", string);
    }
  }]);

  return SvgNode;
}();
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ParticleNode = function () {
  function ParticleNode(radius) {
    _classCallCheck(this, ParticleNode);

    this.target = document.createElementNS("http://www.w3.org/2000/svg", "circle");
    this.target.setAttribute("r", radius);
  }

  _createClass(ParticleNode, [{
    key: "appendTo",
    value: function appendTo(parent) {
      parent.appendChild(this.target);
    }
  }, {
    key: "setPositionData",
    value: function setPositionData(cx, cy) {
      this.target.setAttribute("cx", cx);
      this.target.setAttribute("cy", cy);
    }
  }, {
    key: "setColor",
    value: function setColor(color) {
      this.target.setAttribute("fill", color);
    }
  }, {
    key: "setAnimationData",
    value: function setAnimationData() {
      this.orbit = random(5, 30);
      this.sin = random(0, 2 * Math.PI);
      this.cos = random(0, 2 * Math.PI);
      this.acc = random(0.03, 0.2);
      this.speed = random(0.005, 0.01);
    }
  }, {
    key: "setInteractionData",
    value: function setInteractionData(data) {
      var factor = data || 0;
      this.interactionFactor = factor;
    }
  }, {
    key: "updateFromProxy",
    value: function updateFromProxy(proxy) {
      this.pointX = proxy.w / 1.75 * random(-1, 1);
      this.pointY = proxy.h / 1.75 * random(-1, 1);
    }
  }, {
    key: "swarm",
    value: function swarm() {
      var p = this;

      function getVal(target, attr) {

        var orbit = p.orbit * p.interactionFactor;
        var acc = p.acc;
        var current, wave, point;

        if (attr === "x") {
          current = target._gsTransform.x;
          wave = p.sin;
          point = p.pointX * p.interactionFactor;
          p.sin += p.speed;
        } else if (attr === "y") {
          current = target._gsTransform.y;
          wave = p.cos;
          point = p.pointY * p.interactionFactor;
          p.cos += p.speed;
        }

        var dest = orbit * Math.sin(wave) + point;
        var newVal = current + (dest - current) * acc;

        return newVal;
      }

      TweenMax.to(this.target, 1, { x: 1, y: 1, scaleX: 1, scaleY: 1, transformOrigin: "center", repeat: -1, modifiers: {
          x: function x(_x, target) {
            return getVal(target, "x");
          },
          y: function y(_y, target) {
            return getVal(target, "y");
          },
          scaleX: function scaleX() {
            return Math.cos(p.cos);
          },
          scaleY: function scaleY() {
            return Math.cos(p.cos);
          }
        } });
    }
  }]);

  return ParticleNode;
}();
"use strict";

// @codekit-prepend '../assets/js/Proxy';
// @codekit-prepend '../assets/js/SvgNode';
// @codekit-prepend '../assets/js/ParticleNode';


var animateButton = function animateButton(id, count) {

  var els = [];

  var proxy = new Proxy(id);
  proxy.count = count || 80;
  proxy.particles = [];
  proxy.colors = o.data.colors.rects;

  var el = new SvgNode();
  el.addProxy(proxy);

  el.proxy.updateData();
  el.updateFromProxy();

  addParticles(el);

  els.push(el);
  el.prependIn(document.body);

  bindEvents();

  function addParticles(el) {
    for (var i = 0; i < el.proxy.count; i++) {
      var color = el.proxy.colors[randomInt(0, el.proxy.colors.length - 1)];
      var p = new ParticleNode("8");
      el.proxy.particles.push(p);

      p.setPositionData(el.proxy.w / 2, el.proxy.h / 2);
      p.setColor(color);
      p.setAnimationData();
      p.setInteractionData();
      p.updateFromProxy(el.proxy);
      p.swarm();

      p.appendTo(el.target);
    }
  }

  function bindEvents() {
    els.forEach(function (el) {
      el.proxy.parentElement.addEventListener("mouseover", function (e) {
        filterEvent(e);
      });
      el.proxy.parentElement.addEventListener("mouseout", function (e) {
        filterEvent(e);
      });
      el.proxy.parentElement.addEventListener("mousedown", function (e) {
        filterEvent(e);
      });
      el.proxy.parentElement.addEventListener("mouseup", function (e) {
        filterEvent(e);
      });
    });
    events.on("logoInteraction", filterEvent);
    events.on("logoMotion", filterEvent);
    window.addEventListener("resize", updateElements);
  }

  function filterEvent(data) {
    // Set event to mouse event or timeline event
    var event = data.type || data;

    switch (event) {
      case 'mouseover':
      case 'mouseup':
        if (!o.data.playing) {
          updateParticles(0.9);
        }
        break;
      case 'mouseout':
        if (!o.data.playing) {
          updateParticles(1);
        }
        break;
      case 'mousedown':
        if (!o.data.playing) {
          updateParticles(0.8);
        }
        break;
      case 'expansion':
        if (o.data.playing) {
          updateParticles(0);
        }
        break;
      case 'contraction':
        if (o.data.playing) {
          updateParticles(1);
        }
        break;
    }
  }

  function updateParticles(data) {
    els.forEach(function (el) {

      el.proxy.particles.forEach(function (p) {
        p.setInteractionData(data);
      });
    });
  }

  function updateElements() {
    els.forEach(function (el) {
      el.proxy.updateData();
      el.updateFromProxy();
    });
  }
};
